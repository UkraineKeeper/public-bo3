import fs from 'fs';
import path from 'path';

const allureResults = 'allure-results';
const allureReport = 'allure-report';
const allureHistory = path.join(allureResults, 'history');  // –ö–æ–ø—ñ—é—î–º–æ —ñ—Å—Ç–æ—Ä—ñ—é —Å—é–¥–∏

// –ü–µ—Ä–µ–∫–æ–Ω—É—î–º–æ—Å—å, —â–æ –ø–∞–ø–∫–∞ history —ñ—Å–Ω—É—î
if (!fs.existsSync(allureHistory)) {
  fs.mkdirSync(allureHistory, { recursive: true });
}

// –ö–æ–ø—ñ—é—î–º–æ —Ñ–∞–π–ª–∏ —ñ—Å—Ç–æ—Ä—ñ—ó –∑ `allure-report/history/` –≤ `allure-results/history/`
const reportHistory = path.join(allureReport, 'history');

if (fs.existsSync(reportHistory)) {
  fs.readdirSync(reportHistory).forEach(file => {
    const srcPath = path.join(reportHistory, file);
    const destPath = path.join(allureHistory, file);

    if (fs.statSync(srcPath).isFile()) {
      fs.copyFileSync(srcPath, destPath);
    }
  });
}

console.log(`üì¶ –Ü—Å—Ç–æ—Ä—ñ—è –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–∞ –≤ ${allureHistory}`);


// ------ –í–∑–∞–≥–∞–ª—ñ –Ω–µ –ø—Ä–∞—Ü—é–≤–∞–ª–æ
// import fs from 'fs';
// import path from 'path';

// const allureResults = 'allure-results'; // –ü–∞–ø–∫–∞ –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ —Ç–µ—Å—Ç—ñ–≤
// const allureReport = 'allure-report';   // –ü–∞–ø–∫–∞ –¥–ª—è Allure –∑–≤—ñ—Ç—É
// const allureHistory = path.join(allureReport, 'history'); // –ü–∞–ø–∫–∞ –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó —Ç–µ—Å—Ç—ñ–≤
// const today = new Date();
// const dateStr = today.toISOString().split('T')[0];  // –§–æ—Ä–º–∞—Ç YYYY-MM-DD
// const timeStr = today.toISOString().split('T')[1].split('.')[0];  // –§–æ—Ä–º–∞—Ç HH-MM-SS

// // –°—Ç–≤–æ—Ä—é—î–º–æ –ø—ñ–¥–ø–∞–ø–∫—É –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –ø–æ—Ç–æ—á–Ω–æ–≥–æ –¥–Ω—è –π —á–∞—Å—É
// const resultFolderPath = path.join(allureResults, `${dateStr}-${timeStr}`);
// if (!fs.existsSync(resultFolderPath)) {
//   fs.mkdirSync(resultFolderPath, { recursive: true });
// }

// // –ü–µ—Ä–µ–º—ñ—â–∞—î–º–æ —Ñ–∞–π–ª–∏ –∑ –ø–æ—Ç–æ—á–Ω–æ—ó –ø–∞–ø–∫–∏ allure-results –≤ –Ω–æ–≤–æ—Å—Ç–≤–æ—Ä–µ–Ω—É
// fs.readdirSync(allureResults).forEach(file => {
//   const srcPath = path.join(allureResults, file);
//   const destPath = path.join(resultFolderPath, file);

//   if (fs.statSync(srcPath).isFile()) {
//     fs.renameSync(srcPath, destPath);  // –ü–µ—Ä–µ–º—ñ—â–∞—î–º–æ —Ñ–∞–π–ª–∏ –≤ allure-last
//   }
// });

// console.log(`üì¶ –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ —Ç–µ—Å—Ç—ñ–≤ –∑–±–µ—Ä–µ–∂–µ–Ω–æ –≤ ${resultFolderPath}`);

// // –°—Ç–≤–æ—Ä—é—î–º–æ –ø–∞–ø–∫—É –¥–ª—è —ñ—Å—Ç–æ—Ä—ñ—ó —Ç–µ—Å—Ç—ñ–≤, —è–∫—â–æ —ó—ó –Ω–µ–º–∞—î
// if (!fs.existsSync(allureHistory)) {
//   fs.mkdirSync(allureHistory, { recursive: true });
// }

// // –ö–æ–ø—ñ—é—î–º–æ —Ñ–∞–π–ª–∏ –∑ history –≤ allure-report/history (–¥–æ–¥–∞–≤–∞–Ω–Ω—è –¥–æ —ñ—Å—Ç–æ—Ä—ñ—ó)
// fs.readdirSync(allureResults).forEach(file => {
//   const srcPath = path.join(allureResults, file);
//   const destPath = path.join(allureHistory, file);

//   if (fs.statSync(srcPath).isFile()) {
//     fs.copyFileSync(srcPath, destPath);  // –ö–æ–ø—ñ—é—î–º–æ —Ñ–∞–π–ª–∏ –¥–ª—è —ñ—Å—Ç–æ—Ä—ñ—ó
//   }
// });

// console.log(`üì¶ –Ü—Å—Ç–æ—Ä—ñ—è —Ç–µ—Å—Ç—ñ–≤ —Å–∫–æ–ø—ñ–π–æ–≤–∞–Ω–∞ –≤ ${allureHistory}`);

// ------- –†–∞–Ω—ñ—à–µ –ø—Ä–∞—Ü—é–≤–∞–ª–æ, –∑–∞—Ä–∞–∑ –Ω—ñ
// import fs from 'fs';
// import path from 'path';

// const allureLast = 'allure-last';  // –ü–∞–ø–∫–∞, –¥–µ –∑–±–µ—Ä—ñ–≥–∞—é—Ç—å—Å—è –æ—Å—Ç–∞–Ω–Ω—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ —Ç–µ—Å—Ç—ñ–≤
// const allureResults = 'allure-results';  // –ü–∞–ø–∫–∞ –¥–ª—è Allure –∑–≤—ñ—Ç—É
// const today = new Date();
// const dateStr = today.toISOString().split('T')[0];  // –§–æ—Ä–º–∞—Ç YYYY-MM-DD
// const timeStr = today.toISOString().split('T')[1].split('.')[0];  // –§–æ—Ä–º–∞—Ç HH-MM-SS

// // –°—Ç–≤–æ—Ä—é—î–º–æ –ø—ñ–¥–ø–∞–ø–∫—É –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –ø–æ—Ç–æ—á–Ω–æ–≥–æ –¥–Ω—è –π —á–∞—Å—É
// const resultFolderPath = path.join(allureLast, `${dateStr}-${timeStr}`);
// if (!fs.existsSync(resultFolderPath)) {
//   fs.mkdirSync(resultFolderPath, { recursive: true });
// }

// // –ü–µ—Ä–µ–º—ñ—â–∞—î–º–æ —Ñ–∞–π–ª–∏ –∑ –ø–æ—Ç–æ—á–Ω–æ—ó –ø–∞–ø–∫–∏ allure-results –≤ allure-last
// fs.readdirSync(allureResults).forEach(file => {
//   const srcPath = path.join(allureResults, file);
//   const destPath = path.join(resultFolderPath, file);

//   if (fs.statSync(srcPath).isFile()) {
//     fs.renameSync(srcPath, destPath);  // –ü–µ—Ä–µ–º—ñ—â–∞—î–º–æ —Ñ–∞–π–ª–∏ –≤ allure-last
//   }
// });

// console.log(`üì¶ –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ —Ç–µ—Å—Ç—ñ–≤ –∑–±–µ—Ä–µ–∂–µ–Ω–æ –≤ ${resultFolderPath}`);